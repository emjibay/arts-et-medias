@charset "UTF-8";
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

i {
  font-style: italic;
}

b {
  font-weight: bold;
}

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0;
}

.clearfix {
  zoom: 1;
}
.clearfix:before {
  content: "";
  display: block;
}
.clearfix:after {
  content: "";
  display: table;
  clear: both;
}

@font-face {
  font-family: "YoungSerifRegular";
  src: url("../../../fonts/youngserif/YoungSerif-Regular.eot");
  /* IE9 Compat Modes */
  src: url("../../../fonts/youngserif/YoungSerif-Regular.eot?#iefix") format("embedded-opentype"), url("../../../fonts/youngserif/YoungSerif-Regular.woff2") format("woff2"), url("../../../fonts/youngserif/YoungSerif-Regular.woff") format("woff"), url("../../../fonts/youngserif/YoungSerif-Regular.ttf") format("truetype"), url("../../../fonts/youngserif/YoungSerif-Regular.svg#svgFontName") format("svg");
  /* Legacy iOS */
}
@font-face {
  font-family: "QuebecLight";
  src: url("../../../fonts/quebec/Quebec-Light.otf");
}
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
body {
  font-size: 0 !important;
  overflow-x: hidden;
}

img {
  line-height: 0;
}

a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
}
a:hover {
  color: #1276D3;
  text-decoration: none;
}
a:active {
  text-decoration: none;
}
a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
a:focus::-moz-focus-inner {
  border: 0;
}

.apos-area-widget-controls {
  opacity: 0.9;
}

body.apos-workflow-draft-page [data-apos-widget=apostrophe-rich-text], body.apos-workflow-draft-page [data-apos-area-edit] {
  outline: #00a77b dashed 2px;
}

[data-apos-widget=apostrophe-rich-text] > [data-rich-text]:focus {
  outline: #00a77b dashed 2px;
}

.content {
  position: relative;
  margin: 0 auto;
  width: 320px;
}
@media only screen and (min-width: 768px) {
  .content {
    width: 760px;
  }
}
@media only screen and (min-width: 1024px) {
  .content {
    width: 930px;
  }
}
.content h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 30pt;
}
.content h1 strong {
  font-weight: normal;
  font-style: normal;
}
.content h2 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 22.5pt;
}
.content h2 strong {
  font-weight: normal;
  font-style: normal;
}
.content h3 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 20pt;
}
.content h3 strong {
  font-weight: normal;
  font-style: normal;
}
.content h4 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
}
.content h4 strong {
  font-weight: normal;
  font-style: normal;
}
.content p {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
}

.page-content {
  width: calc( (40px * 8) + (16px * 7) );
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .page-content {
    width: calc( (45px * 8) + (20px * 7) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-content {
    width: calc( (50px * 8) + (30px * 7) );
  }
}

.cta,
.website-cta {
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  color: #fff;
}
.cta:hover,
.website-cta:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.cta:active,
.website-cta:active {
  text-decoration: none;
}
.cta:focus,
.website-cta:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.cta:focus::-moz-focus-inner,
.website-cta:focus::-moz-focus-inner {
  border: 0;
}
.cta:disabled, .cta[disabled],
.website-cta:disabled,
.website-cta[disabled] {
  cursor: not-allowed;
}

.separator {
  border: none;
  border-bottom: 1px solid #757575;
  margin: 30px auto;
  width: 66%;
}

.sr-only {
  position: absolute !important;
  border: 0 !important;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px !important;
  overflow: hidden;
  padding: 0 !important;
  width: 1px !important;
}

.author-list {
  display: block;
  margin: 20px 0;
}
.author-list li {
  display: inline-block;
  margin-right: 10px;
  margin-bottom: 10px;
}
.author-list li::after {
  color: #000;
  content: ",";
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
}
.author-list li:last-of-type {
  margin-right: 0;
}
.author-list li:last-of-type::after {
  content: "";
}
.author-list li .author {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
  font-size: 12.5pt;
}
.author-list li .author:hover {
  color: #1276D3;
  text-decoration: none;
}
.author-list li .author:active {
  text-decoration: none;
}
.author-list li .author:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.author-list li .author:focus::-moz-focus-inner {
  border: 0;
}

.footnote cite,
.bibliography cite {
  font-style: italic;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.nav {
  margin-top: 15px;
  padding: 7px 0 13px 0;
  border-top: 1px solid #757575;
  border-bottom: 1px solid #757575;
}
.nav .nav-list {
  display: flex;
  justify-content: space-between;
}
.nav .nav-list li a {
  color: #000;
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-decoration: none;
}
.nav .nav-list li a:hover {
  color: #1276D3;
  text-decoration: underline;
}
.nav .nav-list li a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.nav .nav-list li a:focus::-moz-focus-inner {
  border: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.apos-pager {
  background-color: transparent !important;
  margin: 40px 0;
  padding: 0 !important;
}
.apos-pager .apos-pager-number {
  display: inline-block;
  background-color: #000;
  border: 1px solid transparent;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  height: 40px;
  line-height: 40px;
  margin-left: 10px;
  text-align: center;
  width: 40px;
  vertical-align: top;
}
.apos-pager .apos-pager-number:first-of-type {
  margin-left: 0;
}
.apos-pager .apos-pager-number:hover {
  background-color: #fff;
  border: 1px solid #000;
}
.apos-pager .apos-pager-number:hover a {
  color: #000;
}
.apos-pager .apos-pager-number:focus-within {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.apos-pager .apos-pager-number:focus-within::-moz-focus-inner {
  border: 0;
}
.apos-pager .apos-pager-number.apos-active {
  background-color: #fff;
  border: 1px solid #000;
  color: #000;
}
.apos-pager .apos-pager-number.apos-last::after {
  content: "";
}
.apos-pager .apos-pager-number a {
  display: inline;
  color: #fff;
  text-decoration: none;
}
.apos-pager .apos-pager-number a:focus {
  box-shadow: none !important;
  outline: 0 !important;
}
.apos-pager .apos-pager-gap {
  display: inline;
  color: #000;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 12.5pt;
  line-height: 40px;
  margin-left: 10px;
  padding: 0 10px;
}

.piece-list {
  margin: 40px 0;
}
.piece-list .list-item {
  width: calc( (40px * 4) + (16px * 3) );
  display: inline-block;
  margin: 0 0 20px 0;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .piece-list .list-item {
    width: calc( (45px * 4) + (20px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .piece-list .list-item {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.piece-list .list-item:nth-child(even) {
  margin-left: 40px;
}
@media only screen and (min-width: 768px) {
  .piece-list .list-item:nth-child(even) {
    margin-left: 45px;
  }
}
@media only screen and (min-width: 1024px) {
  .piece-list .list-item:nth-child(even) {
    margin-left: 30px;
  }
}
.piece-list .piece-link {
  text-decoration: none;
  display: inline-block;
}
.piece-list .piece-link:hover h1 {
  color: #1276D3;
}
.piece-list .piece-link:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.piece-list .piece-link:focus::-moz-focus-inner {
  border: 0;
}
.piece-list .piece-card {
  color: #000;
}
.piece-list .piece-card h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
  line-height: 1;
  margin-top: 0;
}
.piece-list .piece-card h1 strong {
  font-weight: normal;
  font-style: normal;
}

.piece-link-list {
  display: block;
  margin: 20px 0;
}
.piece-link-list li {
  display: inline-block;
  margin-right: 5px;
  margin-bottom: 10px;
}
.piece-link-list li::after {
  color: #000;
  content: ",";
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
}
.piece-link-list li:last-of-type {
  margin-right: 0;
}
.piece-link-list li:last-of-type::after {
  content: "";
}
.piece-link-list li .piece-link {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
  font-size: 12.5pt;
}
.piece-link-list li .piece-link:hover {
  color: #1276D3;
  text-decoration: none;
}
.piece-link-list li .piece-link:active {
  text-decoration: none;
}
.piece-link-list li .piece-link:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.piece-link-list li .piece-link:focus::-moz-focus-inner {
  border: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.rich-content h2, .rich-content h3, .rich-content h3, .rich-content h4 {
  margin-top: 20px;
}
.rich-content p, .rich-content ul, .rich-content ol {
  margin-top: 10px;
}
.rich-content .apos-rich-text {
  margin-top: 20px;
  margin-bottom: 20px;
}
.rich-content .apos-rich-text h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 30pt;
}
.rich-content .apos-rich-text h1 strong {
  font-weight: normal;
  font-style: normal;
}
.rich-content .apos-rich-text h2 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 22.5pt;
}
.rich-content .apos-rich-text h2 strong {
  font-weight: normal;
  font-style: normal;
}
.rich-content .apos-rich-text h3 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 20pt;
}
.rich-content .apos-rich-text h3 strong {
  font-weight: normal;
  font-style: normal;
}
.rich-content .apos-rich-text h4 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
}
.rich-content .apos-rich-text h4 strong {
  font-weight: normal;
  font-style: normal;
}
.rich-content .apos-rich-text h5 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.rich-content .apos-rich-text h6 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.rich-content .apos-rich-text p {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
}
.rich-content .apos-rich-text .anchor, .rich-content .apos-rich-text a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
}
.rich-content .apos-rich-text .anchor:hover, .rich-content .apos-rich-text a:hover {
  color: #1276D3;
  text-decoration: none;
}
.rich-content .apos-rich-text .anchor:active, .rich-content .apos-rich-text a:active {
  text-decoration: none;
}
.rich-content .apos-rich-text .anchor:focus, .rich-content .apos-rich-text a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.rich-content .apos-rich-text .anchor:focus::-moz-focus-inner, .rich-content .apos-rich-text a:focus::-moz-focus-inner {
  border: 0;
}
.rich-content .apos-rich-text .underline, .rich-content .apos-rich-text u {
  text-decoration: underline;
}
.rich-content .apos-rich-text .bold, .rich-content .apos-rich-text b, .rich-content .apos-rich-text strong {
  font-weight: bold;
}
.rich-content .apos-rich-text .italic, .rich-content .apos-rich-text i {
  font-style: italic;
}
.rich-content .apos-rich-text em {
  font-style: italic;
}
.rich-content .apos-rich-text sup {
  vertical-align: super;
  font-size: 80%;
}
.rich-content .apos-rich-text ul {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
}
.rich-content .apos-rich-text ul li {
  margin-bottom: 5px;
}
.rich-content .apos-rich-text ul li:last-of-type {
  margin-bottom: 0;
}
.rich-content .apos-rich-text ul li:before {
  margin-right: 10px;
  content: "—";
}
.rich-content .apos-video-player {
  margin-top: 20px;
  margin-bottom: 20px;
  width: 100%;
}
.rich-content .apos-video-player iframe {
  vertical-align: top;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.sidebar {
  margin-left: 40px;
  width: calc( (40px * 4) + (16px * 3) );
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .sidebar {
    margin-left: 45px;
  }
}
@media only screen and (min-width: 1024px) {
  .sidebar {
    margin-left: 30px;
  }
}
@media only screen and (min-width: 768px) {
  .sidebar {
    width: calc( (45px * 4) + (20px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .sidebar {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.sidebar .h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
}
.sidebar .h1 strong {
  font-weight: normal;
  font-style: normal;
}
.sidebar .h2 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.sidebar .h3 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.sidebar p {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  font-size: 11.25pt;
}
.sidebar ul {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
}
.sidebar li {
  margin-bottom: 5px;
}
.sidebar li:last-of-type {
  margin-bottom: 0;
}
.sidebar li:before {
  margin-right: 10px;
  content: "—";
}
.sidebar a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  font-size: 11.25pt;
  color: #000;
}
.sidebar a:hover {
  color: #1276D3;
  text-decoration: none;
}
.sidebar a:active {
  text-decoration: none;
}
.sidebar a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar a:focus::-moz-focus-inner {
  border: 0;
}
.sidebar label {
  display: block;
  color: #000;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-weight: normal;
  margin-bottom: 5px;
}
.sidebar .search-input {
  display: inline-block;
  -webkit-appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: 1px solid #000;
  color: #000;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: normal;
  height: 35px;
  line-height: 1;
  padding: 0 10px;
  -webkit-appearance: textfield;
  display: inline-block;
  vertical-align: top;
}
.sidebar .search-input:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar .search-input:focus::-moz-focus-inner {
  border: 0;
}
.sidebar .search-input::placeholder {
  color: #757575;
}
.sidebar .search-input::placeholder {
  color: #000;
}
.sidebar .search-button {
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  float: right;
  vertical-align: top;
}
.sidebar .search-button:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.sidebar .search-button:active {
  text-decoration: none;
}
.sidebar .search-button:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar .search-button:focus::-moz-focus-inner {
  border: 0;
}
.sidebar .search-button:disabled, .sidebar .search-button[disabled] {
  cursor: not-allowed;
}
.sidebar .cta {
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  font-size: 11.25pt;
  color: #fff;
}
.sidebar .cta:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.sidebar .cta:active {
  text-decoration: none;
}
.sidebar .cta:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar .cta:focus::-moz-focus-inner {
  border: 0;
}
.sidebar .cta:disabled, .sidebar .cta[disabled] {
  cursor: not-allowed;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.sub-nav {
  border-bottom: 1px solid #757575;
  padding: 7px 0 13px 0;
}
.sub-nav .sub-nav-list li {
  display: inline-block;
  margin-right: 40px;
}
.sub-nav .sub-nav-list li a {
  color: #000;
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-decoration: none;
}
.sub-nav .sub-nav-list li a:hover {
  color: #1276D3;
  text-decoration: underline;
}
.sub-nav .sub-nav-list li a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sub-nav .sub-nav-list li a:focus::-moz-focus-inner {
  border: 0;
}

.tag-list {
  margin: 20px 0;
}
.tag-list li {
  display: inline-block;
  margin-right: 10px;
  margin-bottom: 10px;
}
.tag-list li:last-of-type {
  margin-right: 0;
}

.tag {
  display: inline-block;
  background-color: #757575;
  border: 1px solid transparent;
  color: #fff;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 8pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  padding: 5px 10px;
  text-align: center;
  text-decoration: none;
}

.featured-project-widget .feature-type {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: bold;
  margin-bottom: 0;
}
.featured-project-widget h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
  margin-top: 5px;
}
.featured-project-widget h1 strong {
  font-weight: normal;
  font-style: normal;
}
.featured-project-widget .hero-image {
  object-fit: cover;
  height: calc(calc( (50px * 4) + (30px * 3) ) * 0.5625);
  width: calc( (50px * 4) + (30px * 3) );
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.index-main-partial .index-list {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
}
.index-main-partial .index-list li {
  margin-bottom: 5px;
}
.index-main-partial .index-list li:last-of-type {
  margin-bottom: 0;
}
.index-main-partial .index-list li:before {
  margin-right: 10px;
  content: "—";
}
.index-main-partial .index-list li a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
}
.index-main-partial .index-list li a:hover {
  color: #1276D3;
  text-decoration: none;
}
.index-main-partial .index-list li a:active {
  text-decoration: none;
}
.index-main-partial .index-list li a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.index-main-partial .index-list li a:focus::-moz-focus-inner {
  border: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.header {
  padding: 20px 0 65px;
}
.header .site-title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 50pt;
  line-height: 1;
  text-align: center;
  margin: 0 0 20px 0;
}
.header .site-title strong {
  font-weight: normal;
  font-style: normal;
}
.header .site-title a {
  color: #000;
  text-decoration: none;
}
.header .site-title a:hover {
  color: #1276D3;
}
.header .site-title a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.header .site-title a:focus::-moz-focus-inner {
  border: 0;
}
.header .nav > .nav-list a:hover {
  text-decoration: underline;
  text-decoration-thickness: 2px;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.footer {
  background-color: #000;
  color: #fff;
  padding: 50px 0 70px;
  margin-top: 70px;
}
.footer .site-title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 20pt;
  line-height: 20pt;
}
.footer .site-title strong {
  font-weight: normal;
  font-style: normal;
}
.footer .link-columns {
  margin-top: 50px;
}
.footer .link-columns .column {
  margin-left: 40px;
  width: calc( (40px * 2) + (16px * 1) );
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column {
    margin-left: 45px;
  }
}
@media only screen and (min-width: 1024px) {
  .footer .link-columns .column {
    margin-left: 30px;
  }
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column {
    width: calc( (45px * 2) + (20px * 1) );
  }
}
@media only screen and (min-width: 1024px) {
  .footer .link-columns .column {
    width: calc( (50px * 2) + (30px * 1) );
  }
}
.footer .link-columns .column:first-of-type {
  margin-left: 0;
}
.footer .link-columns .column .column-title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 12.5pt;
  line-height: 1.5;
}
.footer .link-columns .column .column-title strong {
  font-weight: normal;
  font-style: normal;
}
.footer .link-columns .column .list-item {
  margin: 15px 0;
}
.footer .link-columns .column .footer-link {
  color: #fff;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.25;
  text-decoration: none;
}
.footer .link-columns .column .footer-link:hover {
  text-decoration: underline;
  text-decoration-thickness: 1px;
}
.footer .link-columns .column .footer-link:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.footer .link-columns .column .footer-link:focus::-moz-focus-inner {
  border: 0;
}

.page-search .filter-legend {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
  margin: 30px 0 0 0;
}
.page-search .filter-list {
  column-count: 3;
}
.page-search .filter-list .list-item {
  padding: 10px 0;
}
.page-search .filter-list .filter-option-label {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  font-size: 11.25pt;
  margin: 0 0 0 10px;
}
.page-search .search-input {
  width: calc( (40px * 6) + (16px * 5) );
  display: inline-block;
  -webkit-appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: 1px solid #000;
  color: #000;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: normal;
  height: 35px;
  line-height: 1;
  padding: 0 10px;
  display: inline-block;
  vertical-align: top;
  -webkit-appearance: textfield;
}
@media only screen and (min-width: 768px) {
  .page-search .search-input {
    width: calc( (45px * 6) + (20px * 5) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .search-input {
    width: calc( (50px * 6) + (30px * 5) );
  }
}
.page-search .search-input:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-search .search-input:focus::-moz-focus-inner {
  border: 0;
}
.page-search .search-input::placeholder {
  color: #757575;
}
.page-search .search-input::placeholder {
  color: #000;
}
.page-search .search-button {
  width: calc( (40px * 2) + (16px * 1) );
  margin-left: 40px;
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .page-search .search-button {
    width: calc( (45px * 2) + (20px * 1) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .search-button {
    width: calc( (50px * 2) + (30px * 1) );
  }
}
@media only screen and (min-width: 768px) {
  .page-search .search-button {
    margin-left: 45px;
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .search-button {
    margin-left: 30px;
  }
}
.page-search .search-button:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.page-search .search-button:active {
  text-decoration: none;
}
.page-search .search-button:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-search .search-button:focus::-moz-focus-inner {
  border: 0;
}
.page-search .search-button:disabled, .page-search .search-button[disabled] {
  cursor: not-allowed;
}
.page-search .search-results {
  margin-top: 40px;
}
.page-search .search-results .title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 30pt;
}
.page-search .search-results .title strong {
  font-weight: normal;
  font-style: normal;
}
.page-search .sidebar {
  margin-top: 100px;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.page-login h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 30pt;
}
.page-login h1 strong {
  font-weight: normal;
  font-style: normal;
}
.page-login .apos-login-warning {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  background-color: lightgoldenrodyellow;
  border: 1px solid yellow;
  font-size: 10pt;
  margin: 20px 0;
  padding: 10px;
}
.page-login .apos-login-warning::before {
  content: "⚠️";
  margin-right: 5px;
}
.page-login .form-group {
  margin: 20px 0;
}
.page-login legend {
  font-size: 0;
  height: 0;
  visibility: hidden;
  width: 0;
}
.page-login label {
  display: block;
  color: #000;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-weight: normal;
  margin-bottom: 5px;
}
.page-login input[type=text],
.page-login input[type=password] {
  width: calc( (40px * 4) + (16px * 3) );
  display: inline-block;
  -webkit-appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: 1px solid #000;
  color: #000;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: normal;
  height: 35px;
  line-height: 1;
  padding: 0 10px;
}
@media only screen and (min-width: 768px) {
  .page-login input[type=text],
.page-login input[type=password] {
    width: calc( (45px * 4) + (20px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-login input[type=text],
.page-login input[type=password] {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.page-login input[type=text]:focus,
.page-login input[type=password]:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-login input[type=text]:focus::-moz-focus-inner,
.page-login input[type=password]:focus::-moz-focus-inner {
  border: 0;
}
.page-login input[type=text]::placeholder,
.page-login input[type=password]::placeholder {
  color: #757575;
}
.page-login button[type=submit] {
  width: calc( (40px * 4) + (16px * 3) );
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
}
@media only screen and (min-width: 768px) {
  .page-login button[type=submit] {
    width: calc( (45px * 4) + (20px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-login button[type=submit] {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.page-login button[type=submit]:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.page-login button[type=submit]:active {
  text-decoration: none;
}
.page-login button[type=submit]:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-login button[type=submit]:focus::-moz-focus-inner {
  border: 0;
}
.page-login button[type=submit]:disabled, .page-login button[type=submit][disabled] {
  cursor: not-allowed;
}

.book-details .book-title {
  margin-bottom: 0;
}
.book-details .authors .piece-link-list {
  margin-top: 5px;
}
.book-details .book-cover {
  height: 240px;
  float: left;
  margin-right: 20px;
  margin-bottom: 20px;
  top: 25px;
  position: relative;
}

.sidebar-person-details .profile-pic {
  object-fit: cover;
  height: calc( (40px * 6) + (16px * 5) );
  width: calc( (40px * 6) + (16px * 5) );
  filter: none;
  -webkit-filter: grayscale(100%);
  -moz-filter: grayscale(100%);
  -ms-filter: grayscale(100%);
  -o-filter: grayscale(100%);
}
@media only screen and (min-width: 1024px) {
  .sidebar-person-details .profile-pic {
    width: calc( (50px * 4) + (30px * 3) );
    height: calc( (50px * 4) + (30px * 3) );
  }
}

.project-details .project-title {
  margin-bottom: 0;
}
.project-details .creators .piece-link-list {
  margin-top: 5px;
}
.project-details .main-hero-image {
  object-fit: cover;
  height: calc(calc( (50px * 8) + (30px * 7) ) * 0.5625);
  width: calc( (50px * 8) + (30px * 7) );
}
.project-details .page-content {
  margin-top: 20px;
}

/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

i {
  font-style: italic;
}

b {
  font-weight: bold;
}

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0;
}

.clearfix {
  zoom: 1;
}
.clearfix:before {
  content: "";
  display: block;
}
.clearfix:after {
  content: "";
  display: table;
  clear: both;
}


/*# sourceMappingURL=site.css.map*/