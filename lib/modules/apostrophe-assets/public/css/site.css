@charset "UTF-8";
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

i {
  font-style: italic;
}

b {
  font-weight: bold;
}

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0;
}

.clearfix {
  zoom: 1;
}
.clearfix:before {
  content: "";
  display: block;
}
.clearfix:after {
  content: "";
  display: table;
  clear: both;
}

@font-face {
  font-family: "YoungSerifRegular";
  src: url("../../../fonts/youngserif/YoungSerif-Regular.eot");
  /* IE9 Compat Modes */
  src: url("../../../fonts/youngserif/YoungSerif-Regular.eot?#iefix") format("embedded-opentype"), url("../../../fonts/youngserif/YoungSerif-Regular.woff2") format("woff2"), url("../../../fonts/youngserif/YoungSerif-Regular.woff") format("woff"), url("../../../fonts/youngserif/YoungSerif-Regular.ttf") format("truetype"), url("../../../fonts/youngserif/YoungSerif-Regular.svg#svgFontName") format("svg");
  /* Legacy iOS */
}
@font-face {
  font-family: "QuebecLight";
  src: url("../../../fonts/quebec/Quebec-Light.otf");
}
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
body {
  font-size: 0 !important;
  overflow-x: hidden;
}

img {
  line-height: 0;
  font-size: 0;
}

a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
}
a:hover {
  color: #1276D3;
  text-decoration: none;
}
a:active {
  text-decoration: none;
}
a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
a:focus::-moz-focus-inner {
  border: 0;
}

.apos-area-widget-controls {
  opacity: 0.9;
}

body.apos-workflow-draft-page [data-apos-widget=apostrophe-rich-text], body.apos-workflow-draft-page [data-apos-area-edit] {
  outline: #00a77b dashed 2px;
}

[data-apos-widget=apostrophe-rich-text] > [data-rich-text]:focus {
  outline: #00a77b dashed 2px;
}

.content {
  position: relative;
  margin: 0 auto;
  width: 320px;
}
@media only screen and (min-width: 768px) {
  .content {
    width: 695px;
  }
}
@media only screen and (min-width: 1024px) {
  .content {
    width: 930px;
  }
}
.content h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 25pt;
}
.content h1 strong {
  font-weight: normal;
  font-style: normal;
}
@media only screen and (min-width: 768px) {
  .content h1 {
    font-size: 30pt;
  }
}
.content h2 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 22.5pt;
}
.content h2 strong {
  font-weight: normal;
  font-style: normal;
}
.content h3 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
}
.content h3 strong {
  font-weight: normal;
  font-style: normal;
}
.content h4 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
}
.content h4 strong {
  font-weight: normal;
  font-style: normal;
}
.content p {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
}

.page-content {
  width: calc( (40px * 6) + (16px * 5) );
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .page-content {
    width: calc( (35px * 6) + (25px * 5) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-content {
    width: calc( (50px * 6) + (30px * 5) );
  }
}
@media only screen and (min-width: 768px) {
  .page-content {
    width: calc( (40px * 8) + (16px * 7) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .page-content {
    width: calc( (35px * 8) + (25px * 7) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .page-content {
    width: calc( (50px * 8) + (30px * 7) );
  }
}
.page-content .column {
  display: inline-block;
}
.page-content .column.right {
  margin-left: 30px;
}

.latest-pieces-heading {
  border-bottom: 1px solid #bababa;
  color: #757575;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: bold;
  margin-bottom: 0;
  margin-top: 60px;
  padding-bottom: 10px;
}

.cta,
.website-cta {
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  color: #fff;
}
.cta:hover,
.website-cta:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.cta:active,
.website-cta:active {
  text-decoration: none;
}
.cta:focus,
.website-cta:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.cta:focus::-moz-focus-inner,
.website-cta:focus::-moz-focus-inner {
  border: 0;
}
.cta:disabled, .cta[disabled],
.website-cta:disabled,
.website-cta[disabled] {
  cursor: not-allowed;
}

.separator {
  border: none;
  border-bottom: 1px solid #757575;
  margin: 30px auto;
  width: 66%;
}

.sr-only {
  position: absolute;
  border: 0;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  font-size: 0;
  height: 1px;
  overflow: hidden;
  padding: 0;
  width: 1px;
}

.author-list {
  display: block;
  margin: 20px 0;
}
.author-list li {
  display: inline-block;
  margin-right: 10px;
  margin-bottom: 10px;
}
.author-list li::after {
  color: #000;
  content: ",";
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
}
.author-list li:last-of-type {
  margin-right: 0;
}
.author-list li:last-of-type::after {
  content: "";
}
.author-list li .author {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
  font-size: 12.5pt;
}
.author-list li .author:hover {
  color: #1276D3;
  text-decoration: none;
}
.author-list li .author:active {
  text-decoration: none;
}
.author-list li .author:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.author-list li .author:focus::-moz-focus-inner {
  border: 0;
}

.footnote cite,
.bibliography cite {
  font-style: italic;
}

.breadcrumbs {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  margin-bottom: 30px;
}
.breadcrumbs .breadcrumbs-list li {
  display: inline-block;
}
.breadcrumbs .breadcrumbs-list li::after {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  content: "/";
  margin-left: 5px;
  margin-right: 5px;
}

.byline-list {
  margin: 5px 0;
  list-style: none;
}
.byline-list::after {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  content: ",";
  margin: 5px 0;
}
.byline-list:last-of-type::after {
  content: "";
  margin: 0;
  font-size: 0;
}
.byline-list li {
  display: inline-block;
  position: relative;
  margin-right: 10px;
}
.byline-list li::after {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  content: ",";
  position: absolute;
  bottom: 0;
  right: -5px;
}
.byline-list li:last-of-type {
  margin-right: 0;
}
.byline-list li:last-of-type::after {
  content: "";
}
.byline-list li p {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  margin: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.mobile-menu {
  position: fixed;
  color: #fff;
  height: 100%;
  top: 0;
  width: 100%;
  z-index: 2;
  -webkit-transform: translateX(-100%);
  transform: translateX(-100%);
  transition: transform 150ms ease-in-out;
  will-change: transform;
}
.mobile-menu.visible {
  -webkit-transform: translateX(0);
  transform: translateX(0);
  transition: transform 300ms ease-in-out;
  will-change: transform;
}
@media only screen and (min-width: 768px) {
  .mobile-menu {
    display: none;
  }
}
.mobile-menu .site-title {
  padding: 20px 0;
  text-align: center;
  background-color: #000;
}
.mobile-menu .site-title a {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  color: #fff;
  font-size: 20pt;
  line-height: 1;
  text-decoration: none;
}
.mobile-menu .site-title a strong {
  font-weight: normal;
  font-style: normal;
}
.mobile-menu .site-title a:hover {
  color: #1276D3;
}
.mobile-menu .site-title a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.mobile-menu .site-title a:focus::-moz-focus-inner {
  border: 0;
}
.mobile-menu .close-mobile-menu-button {
  position: absolute;
  background-color: transparent;
  border: none;
  padding: 10px;
  top: 15px;
  right: 15px;
}
.mobile-menu .close-mobile-menu-button .icon {
  width: 15px;
  height: 15px;
  display: inline-block;
}
.mobile-menu .close-mobile-menu-button .label {
  position: absolute;
  border: 0;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  font-size: 0;
  height: 1px;
  overflow: hidden;
  padding: 0;
  width: 1px;
}

.overlay {
  position: absolute;
  background-color: rgba(0, 0, 0, 0.75);
  height: 100%;
  left: 0;
  opacity: 0;
  top: 0;
  width: 100%;
  z-index: 1;
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  opacity: 0;
  visibility: hidden;
  -webkit-transition: visibility 150ms, opacity 150ms linear;
  transition: visibility 150ms, opacity 150ms linear;
}
.overlay.visible {
  opacity: 1;
  visibility: visible;
  -webkit-transition: visibility 0ms, opacity 300ms linear;
  transition: visibility 0ms, opacity 300ms linear;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.mobile-menu-button {
  display: inline-block;
  background-color: transparent;
  border: none;
  cursor: pointer;
  padding: 10px 20px 10px 0;
}
.mobile-menu-button .icon {
  width: 15px;
  height: 15px;
}
.mobile-menu-button .label {
  position: absolute;
  border: 0;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  font-size: 0;
  height: 1px;
  overflow: hidden;
  padding: 0;
  width: 1px;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.mobile-search-button {
  display: inline-block;
  background-color: transparent;
  border: none;
  padding: 10px 0 10px 20px;
}
.mobile-search-button .icon {
  width: 15px;
  height: 15px;
}
.mobile-search-button .label {
  position: absolute;
  border: 0;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  font-size: 0;
  height: 1px;
  overflow: hidden;
  padding: 0;
  width: 1px;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.nav {
  background-color: #000;
  border-bottom: 1px solid #757575;
  border-top: 1px solid #757575;
  padding: 15px 0 25px;
  margin-top: 0;
}
@media only screen and (min-width: 768px) {
  .nav {
    display: block;
    background-color: transparent;
    margin-top: 15px;
    padding: 7px 0 13px 0;
  }
}
.nav .nav-list {
  display: block;
}
@media only screen and (min-width: 768px) {
  .nav .nav-list {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
  }
}
.nav .nav-list li {
  text-align: center;
}
@media only screen and (min-width: 768px) {
  .nav .nav-list li {
    text-align: unset;
  }
}
.nav .nav-list li a {
  display: block;
  color: #fff;
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  padding: 15px 0;
  text-decoration: none;
}
@media only screen and (min-width: 768px) {
  .nav .nav-list li a {
    display: unset;
    color: #000;
    font-size: 12pt;
    padding: unset;
  }
}
@media only screen and (min-width: 1024px) {
  .nav .nav-list li a {
    font-size: 15pt;
  }
}
.nav .nav-list li a:hover {
  color: #1276D3;
  text-decoration: underline;
  text-decoration-thickness: 2px;
}
.nav .nav-list li a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.nav .nav-list li a:focus::-moz-focus-inner {
  border: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.apos-pager {
  background-color: transparent !important;
  margin: 40px 0;
  padding: 0 !important;
}
.apos-pager .apos-pager-number {
  display: inline-block;
  background-color: #000;
  border: 1px solid transparent;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  height: 40px;
  line-height: 40px;
  margin-left: 10px;
  text-align: center;
  width: 40px;
  vertical-align: top;
}
.apos-pager .apos-pager-number:first-of-type {
  margin-left: 0;
}
.apos-pager .apos-pager-number:hover {
  background-color: #fff;
  border: 1px solid #000;
}
.apos-pager .apos-pager-number:hover a {
  color: #000;
}
.apos-pager .apos-pager-number:focus-within {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.apos-pager .apos-pager-number:focus-within::-moz-focus-inner {
  border: 0;
}
.apos-pager .apos-pager-number.apos-active {
  background-color: #fff;
  border: 1px solid #000;
  color: #000;
}
.apos-pager .apos-pager-number.apos-last::after {
  content: "";
}
.apos-pager .apos-pager-number a {
  display: inline;
  color: #fff;
  text-decoration: none;
}
.apos-pager .apos-pager-number a:focus {
  box-shadow: none !important;
  outline: 0 !important;
}
.apos-pager .apos-pager-gap {
  display: inline;
  color: #000;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 12.5pt;
  line-height: 40px;
  margin-left: 10px;
  padding: 0 10px;
}

.piece-link-list {
  display: block;
  margin: 20px 0;
}
.piece-link-list li {
  display: inline-block;
  margin-right: 5px;
  margin-bottom: 10px;
}
.piece-link-list li::after {
  color: #000;
  content: ",";
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
}
.piece-link-list li:last-of-type {
  margin-right: 0;
}
.piece-link-list li:last-of-type::after {
  content: "";
}
.piece-link-list li .piece-link {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
  font-size: 12.5pt;
}
.piece-link-list li .piece-link:hover {
  color: #1276D3;
  text-decoration: none;
}
.piece-link-list li .piece-link:active {
  text-decoration: none;
}
.piece-link-list li .piece-link:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.piece-link-list li .piece-link:focus::-moz-focus-inner {
  border: 0;
}

.piece-list {
  margin: 40px 0;
}
.piece-list .list-item {
  width: calc( (40px * 6) + (16px * 5) );
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .piece-list .list-item {
    width: calc( (35px * 6) + (25px * 5) );
  }
}
@media only screen and (min-width: 1024px) {
  .piece-list .list-item {
    width: calc( (50px * 6) + (30px * 5) );
  }
}
.piece-list .list-item:not(:first-of-type) {
  margin: 40px 0 0 0;
}
@media only screen and (min-width: 768px) {
  .piece-list .list-item {
    width: calc( (40px * 4) + (16px * 3) );
    margin: 0 0 60px 0;
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .piece-list .list-item {
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .piece-list .list-item {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
@media only screen and (min-width: 768px) {
  .piece-list .list-item:not(:first-of-type) {
    margin: 0 0 60px 0;
  }
}
@media only screen and (min-width: 768px) {
  .piece-list .list-item:nth-child(even) {
    margin-left: 16px;
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .piece-list .list-item:nth-child(even) {
    margin-left: 25px;
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .piece-list .list-item:nth-child(even) {
    margin-left: 30px;
  }
}
.piece-list .piece-link {
  text-decoration: none;
  display: inline-block;
}
.piece-list .piece-link:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.piece-list .piece-link:focus::-moz-focus-inner {
  border: 0;
}
.piece-list .piece-card {
  color: #000;
}
.piece-list .piece-card .heading {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
  line-height: 1;
  margin: 0;
}
.piece-list .piece-card .heading strong {
  font-weight: normal;
  font-style: normal;
}
.piece-list .piece-card .byline-list {
  display: inline-block;
}
.piece-list .piece-card .publication-date {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  font-size: 11.25pt;
  margin: 5px 0 0 0;
}
.piece-list .piece-card .org-location {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  margin: 5px 0;
}
.piece-list .piece-card .hero-image {
  height: calc(calc( (40px * 6) + (16px * 5) ) * 0.25);
  width: calc( (40px * 6) + (16px * 5) );
  margin-top: 10px;
  object-fit: cover;
}
@media only screen and (min-width: 768px) {
  .piece-list .piece-card .hero-image {
    height: calc(calc( (35px * 4) + (25px * 3) ) * 0.25);
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .piece-list .piece-card .hero-image {
    height: calc(calc( (50px * 4) + (30px * 3) ) * 0.25);
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.piece-list .piece-card .piece-cta {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  font-size: 12.5pt;
  margin-top: 20px;
}
.piece-list .piece-card .piece-cta:hover {
  color: #1276D3;
  text-decoration: none;
}
.piece-list .piece-card .piece-cta:active {
  text-decoration: none;
}
.piece-list .piece-card .piece-cta:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.piece-list .piece-card .piece-cta:focus::-moz-focus-inner {
  border: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.rich-content h2, .rich-content h3, .rich-content h3, .rich-content h4 {
  margin-top: 20px;
}
.rich-content p, .rich-content ul, .rich-content ol {
  margin-top: 10px;
}
.rich-content .apos-rich-text {
  margin-top: 20px;
  margin-bottom: 20px;
}
.rich-content .apos-rich-text h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 25pt;
}
.rich-content .apos-rich-text h1 strong {
  font-weight: normal;
  font-style: normal;
}
@media only screen and (min-width: 768px) {
  .rich-content .apos-rich-text h1 {
    font-size: 30pt;
  }
}
.rich-content .apos-rich-text h2 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 22.5pt;
  margin-top: 50px;
}
.rich-content .apos-rich-text h2 strong {
  font-weight: normal;
  font-style: normal;
}
.rich-content .apos-rich-text h3 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
  margin-top: 20px;
}
.rich-content .apos-rich-text h3 strong {
  font-weight: normal;
  font-style: normal;
}
.rich-content .apos-rich-text h4 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 17.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 10px 0 15px 0;
}
.rich-content .apos-rich-text h5 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.rich-content .apos-rich-text h6 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.rich-content .apos-rich-text p {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
}
.rich-content .apos-rich-text blockquote {
  background-color: #eee;
  padding: 15px 30px;
  margin: 20px 0;
}
.rich-content .apos-rich-text blockquote * {
  font-size: 11.25pt;
  line-height: 1.75;
}
.rich-content .apos-rich-text .anchor, .rich-content .apos-rich-text a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
}
.rich-content .apos-rich-text .anchor:hover, .rich-content .apos-rich-text a:hover {
  color: #1276D3;
  text-decoration: none;
}
.rich-content .apos-rich-text .anchor:active, .rich-content .apos-rich-text a:active {
  text-decoration: none;
}
.rich-content .apos-rich-text .anchor:focus, .rich-content .apos-rich-text a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.rich-content .apos-rich-text .anchor:focus::-moz-focus-inner, .rich-content .apos-rich-text a:focus::-moz-focus-inner {
  border: 0;
}
.rich-content .apos-rich-text .underline, .rich-content .apos-rich-text u {
  text-decoration: underline;
}
.rich-content .apos-rich-text .bold, .rich-content .apos-rich-text b, .rich-content .apos-rich-text strong {
  font-weight: bold;
}
.rich-content .apos-rich-text .italic, .rich-content .apos-rich-text i {
  font-style: italic;
}
.rich-content .apos-rich-text em {
  font-style: italic;
}
.rich-content .apos-rich-text sup {
  vertical-align: super;
  font-size: 75%;
}
.rich-content .apos-rich-text sub {
  vertical-align: sub;
  font-size: 75%;
}
.rich-content .apos-rich-text ul {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  position: relative;
  padding-left: 25px;
}
.rich-content .apos-rich-text ul li {
  position: relative;
  margin-bottom: 5px;
}
.rich-content .apos-rich-text ul li:last-of-type {
  margin-bottom: 0;
}
.rich-content .apos-rich-text ul li:before {
  position: absolute;
  content: "—";
  left: -25px;
  margin-right: 5px;
}
.rich-content .apos-video-player {
  margin-top: 20px;
  margin-bottom: 20px;
  width: 100%;
}
.rich-content .apos-video-player iframe {
  vertical-align: top;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.sidebar {
  margin-left: 16px;
  width: calc( (40px * 4) + (16px * 3) );
  display: none;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .sidebar {
    margin-left: 25px;
  }
}
@media only screen and (min-width: 1024px) {
  .sidebar {
    margin-left: 30px;
  }
}
@media only screen and (min-width: 768px) {
  .sidebar {
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .sidebar {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
@media only screen and (min-width: 768px) {
  .sidebar {
    display: inline-block;
  }
}
.sidebar .h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
}
.sidebar .h1 strong {
  font-weight: normal;
  font-style: normal;
}
.sidebar .h2 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.sidebar .h3 {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
}
.sidebar p {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  font-size: 11.25pt;
}
.sidebar ul {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  position: relative;
  padding-left: 25px;
}
.sidebar li {
  position: relative;
  margin-bottom: 5px;
}
.sidebar li:last-of-type {
  margin-bottom: 0;
}
.sidebar li:before {
  position: absolute;
  content: "—";
  left: -25px;
  margin-right: 5px;
}
.sidebar a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  font-size: 11.25pt;
  color: #000;
}
.sidebar a:hover {
  color: #1276D3;
  text-decoration: none;
}
.sidebar a:active {
  text-decoration: none;
}
.sidebar a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar a:focus::-moz-focus-inner {
  border: 0;
}
.sidebar label {
  display: block;
  color: #000;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-weight: normal;
  margin-bottom: 5px;
}
.sidebar .search-input {
  display: inline-block;
  -webkit-appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: 1px solid #000;
  color: #000;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: normal;
  height: 35px;
  line-height: 1;
  padding: 0 10px;
  display: inline-block;
  -webkit-appearance: textfield;
  vertical-align: top;
  width: 170px;
}
.sidebar .search-input:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar .search-input:focus::-moz-focus-inner {
  border: 0;
}
.sidebar .search-input::placeholder {
  color: #757575;
}
@media only screen and (min-width: 1024px) {
  .sidebar .search-input {
    width: unset;
  }
}
.sidebar .search-input::placeholder {
  color: #000;
}
.sidebar .search-button {
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  color: #fff;
  float: right;
  padding: 0 10px;
  vertical-align: top;
}
.sidebar .search-button:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.sidebar .search-button:active {
  text-decoration: none;
}
.sidebar .search-button:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar .search-button:focus::-moz-focus-inner {
  border: 0;
}
.sidebar .search-button:disabled, .sidebar .search-button[disabled] {
  cursor: not-allowed;
}
@media only screen and (min-width: 1024px) {
  .sidebar .search-button {
    padding: 0 20px;
  }
}
.sidebar .search-button .icon {
  display: inline-block;
  position: relative;
  height: 15px;
  top: 2px;
  width: 15px;
}
@media only screen and (min-width: 1024px) {
  .sidebar .search-button .icon {
    display: none;
  }
}
.sidebar .search-button .label {
  position: absolute;
  border: 0;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  font-size: 0;
  height: 1px;
  overflow: hidden;
  padding: 0;
  width: 1px;
}
@media only screen and (min-width: 1024px) {
  .sidebar .search-button .label {
    position: unset;
    border: unset;
    clip: unset;
    font-size: unset;
    height: unset;
    overflow: unset;
    padding: unset;
    width: unset;
  }
}
.sidebar .cta {
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  font-size: 11.25pt;
  color: #fff;
}
.sidebar .cta:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.sidebar .cta:active {
  text-decoration: none;
}
.sidebar .cta:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sidebar .cta:focus::-moz-focus-inner {
  border: 0;
}
.sidebar .cta:disabled, .sidebar .cta[disabled] {
  cursor: not-allowed;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.sub-nav {
  border-bottom: 1px solid #757575;
  padding: 7px 0 13px 0;
}
.sub-nav .sub-nav-list li {
  display: inline-block;
  margin-right: 40px;
}
.sub-nav .sub-nav-list li a {
  color: #000;
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-decoration: none;
}
.sub-nav .sub-nav-list li a:hover {
  color: #1276D3;
  text-decoration: underline;
}
.sub-nav .sub-nav-list li a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.sub-nav .sub-nav-list li a:focus::-moz-focus-inner {
  border: 0;
}

.tag-list {
  margin: 20px 0;
}
.tag-list li {
  display: inline-block;
  margin-right: 10px;
  margin-bottom: 10px;
}
.tag-list li:last-of-type {
  margin-right: 0;
}

.tag {
  display: inline-block;
  background-color: #757575;
  border: 1px solid transparent;
  color: #fff;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 8pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  padding: 5px 10px;
  text-align: center;
  text-decoration: none;
}

.featured-piece-widget {
  width: calc( (40px * 6) + (16px * 5) );
}
@media only screen and (min-width: 768px) {
  .featured-piece-widget {
    width: calc( (35px * 8) + (25px * 7) );
  }
}
@media only screen and (min-width: 1024px) {
  .featured-piece-widget {
    width: calc( (50px * 8) + (30px * 7) );
  }
}
.featured-piece-widget .feature-type {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: bold;
  margin-bottom: 0;
}
.featured-piece-widget h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
  margin-top: 5px;
  margin-bottom: 0;
}
.featured-piece-widget h1 strong {
  font-weight: normal;
  font-style: normal;
}
.featured-piece-widget .byline {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  margin: 5px 0;
}
.featured-piece-widget .byline-list {
  margin: 5px 0;
  display: inline-block;
}
.featured-piece-widget .byline-list li:before {
  display: none;
  content: "";
  font-size: 0;
  height: 0;
  line-height: 0;
  margin: 0;
}
.featured-piece-widget .publication-date {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
}
.featured-piece-widget .hero-image {
  height: calc(calc( (40px * 6) + (16px * 5) ) * 0.5);
  width: calc( (40px * 6) + (16px * 5) );
  margin-top: 10px;
  object-fit: cover;
}
@media only screen and (min-width: 768px) {
  .featured-piece-widget .hero-image {
    height: calc(calc( (35px * 8) + (25px * 7) ) * 0.5);
    width: calc( (35px * 8) + (25px * 7) );
  }
}
@media only screen and (min-width: 1024px) {
  .featured-piece-widget .hero-image {
    height: calc(calc( (50px * 8) + (30px * 7) ) * 0.5);
    width: calc( (50px * 8) + (30px * 7) );
  }
}

.column .featured-piece-widget,
.sidebar .featured-piece-widget {
  width: calc( (50px * 6) + (30px * 5) );
}
@media only screen and (min-width: 768px) {
  .column .featured-piece-widget,
.sidebar .featured-piece-widget {
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .column .featured-piece-widget,
.sidebar .featured-piece-widget {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.column .featured-piece-widget .byline-list,
.sidebar .featured-piece-widget .byline-list {
  margin: 0;
}
.column .featured-piece-widget .byline-list::after,
.sidebar .featured-piece-widget .byline-list::after {
  margin: 0;
}
.column .featured-piece-widget .hero-image,
.sidebar .featured-piece-widget .hero-image {
  height: calc(calc( (35px * 6) + (25px * 5) ) * 0.5625);
  width: calc( (35px * 6) + (25px * 5) );
}
@media only screen and (min-width: 768px) {
  .column .featured-piece-widget .hero-image,
.sidebar .featured-piece-widget .hero-image {
    height: calc(calc( (35px * 4) + (25px * 3) ) * 0.5625);
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .column .featured-piece-widget .hero-image,
.sidebar .featured-piece-widget .hero-image {
    height: calc(calc( (50px * 4) + (30px * 3) ) * 0.5625);
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.column .featured-piece-widget.featured-book-widget .hero-image,
.sidebar .featured-piece-widget.featured-book-widget .hero-image {
  margin-top: 10px;
  object-fit: contain;
}
@media only screen and (min-width: 768px) {
  .column .featured-piece-widget.featured-book-widget .hero-image,
.sidebar .featured-piece-widget.featured-book-widget .hero-image {
    height: calc( (35px * 4) + (25px * 3) );
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .column .featured-piece-widget.featured-book-widget .hero-image,
.sidebar .featured-piece-widget.featured-book-widget .hero-image {
    height: calc( (50px * 4) + (30px * 3) );
    width: calc( (50px * 4) + (30px * 3) );
  }
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.index-main-partial .index-list {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  position: relative;
  padding-left: 25px;
}
.index-main-partial .index-list li {
  position: relative;
  margin-bottom: 5px;
}
.index-main-partial .index-list li:last-of-type {
  margin-bottom: 0;
}
.index-main-partial .index-list li:before {
  position: absolute;
  content: "—";
  left: -25px;
  margin-right: 5px;
}
.index-main-partial .index-list li a {
  cursor: pointer;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-style: normal;
  font-weight: normal;
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-decoration-color: #1276D3;
  color: #000;
}
.index-main-partial .index-list li a:hover {
  color: #1276D3;
  text-decoration: none;
}
.index-main-partial .index-list li a:active {
  text-decoration: none;
}
.index-main-partial .index-list li a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.index-main-partial .index-list li a:focus::-moz-focus-inner {
  border: 0;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.header {
  border-bottom: 1px solid #000;
  margin-bottom: 20px;
  padding: 20px 0 0 0;
  position: relative;
}
@media only screen and (min-width: 768px) {
  .header {
    border-bottom: none;
    padding: 20px 0 40px 0;
  }
}
.header .site-title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 20pt;
  line-height: 1;
  margin: 0 0 20px 0;
  text-align: center;
}
.header .site-title strong {
  font-weight: normal;
  font-style: normal;
}
@media only screen and (min-width: 768px) {
  .header .site-title {
    font-size: 50pt;
  }
}
.header .site-title a {
  color: #000;
  text-decoration: none;
}
.header .site-title a:hover {
  color: #1276D3;
}
.header .site-title a:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.header .site-title a:focus::-moz-focus-inner {
  border: 0;
}
.header .mobile-container {
  width: calc( (40px * 6) + (16px * 5) );
  margin: 0 auto;
}
@media only screen and (min-width: 768px) {
  .header .mobile-container {
    width: calc( (35px * 6) + (25px * 5) );
  }
}
@media only screen and (min-width: 1024px) {
  .header .mobile-container {
    width: calc( (50px * 6) + (30px * 5) );
  }
}
.header .mobile-container .mobile-menu-button {
  display: inline-block;
}
.header .mobile-container .site-title {
  display: inline-block;
  width: calc(100% - 70px);
}
.header .mobile-container .mobile-search-button {
  display: inline-block;
}
@media only screen and (min-width: 768px) {
  .header .mobile-container {
    display: none;
  }
}
.header .desktop-container {
  display: none;
}
@media only screen and (min-width: 768px) {
  .header .desktop-container {
    display: block;
  }
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.footer {
  background-color: #000;
  color: #fff;
  padding: 50px 0 30px;
  margin-top: 70px;
}
.footer .site-title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 20pt;
  line-height: 20pt;
}
.footer .site-title strong {
  font-weight: normal;
  font-style: normal;
}
.footer .link-columns {
  margin-top: 30px;
}
.footer .link-columns .column {
  margin-left: 16px;
  width: calc( (40px * 3) + (16px * 2) );
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column {
    margin-left: 25px;
  }
}
@media only screen and (min-width: 1024px) {
  .footer .link-columns .column {
    margin-left: 30px;
  }
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column {
    width: calc( (35px * 3) + (25px * 2) );
  }
}
@media only screen and (min-width: 1024px) {
  .footer .link-columns .column {
    width: calc( (50px * 3) + (30px * 2) );
  }
}
.footer .link-columns .column:nth-child(odd) {
  margin-left: 0;
}
.footer .link-columns .column:nth-child(n+3) {
  margin-top: 20px;
}
.footer .link-columns .column:first-of-type {
  margin-left: 0;
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column {
    width: calc( (40px * 2) + (16px * 1) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .footer .link-columns .column {
    width: calc( (35px * 2) + (25px * 1) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .footer .link-columns .column {
    width: calc( (50px * 2) + (30px * 1) );
  }
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column:nth-child(odd) {
    margin-left: 16px;
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .footer .link-columns .column:nth-child(odd) {
    margin-left: 25px;
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .footer .link-columns .column:nth-child(odd) {
    margin-left: 30px;
  }
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column:nth-child(n+3) {
    margin-top: 0;
  }
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column:first-of-type {
    margin-left: 0;
  }
}
.footer .link-columns .column .column-title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 12.5pt;
  line-height: 1.5;
  min-height: 50px;
  margin-top: 40px;
}
.footer .link-columns .column .column-title strong {
  font-weight: normal;
  font-style: normal;
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column .column-title {
    font-size: 10pt;
    min-height: 40px;
  }
}
@media only screen and (min-width: 1024px) {
  .footer .link-columns .column .column-title {
    font-size: 12.5pt;
    min-height: 50px;
  }
}
@media only screen and (min-width: 768px) {
  .footer .link-columns .column ul {
    margin-top: 20px;
  }
}
@media only screen and (min-width: 1024px) {
  .footer .link-columns .column ul {
    margin-top: 30px;
  }
}
.footer .link-columns .column .list-item {
  margin: 15px 0;
}
.footer .link-columns .column .footer-link {
  color: #fff;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.25;
  text-decoration: none;
}
.footer .link-columns .column .footer-link:hover {
  text-decoration: underline;
  text-decoration-thickness: 1px;
}
.footer .link-columns .column .footer-link:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.footer .link-columns .column .footer-link:focus::-moz-focus-inner {
  border: 0;
}
.footer .footer-separator {
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid #fff;
  margin: 50px 0;
}
.footer .copyright {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
}

.home .page-content section {
  margin-bottom: 60px;
}
.home .latest-pieces-heading {
  border-bottom: 1px solid #bababa;
  color: #757575;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: bold;
  margin-bottom: 0;
  padding-bottom: 10px;
  margin-top: 60px;
}
.home .piece-list {
  margin-bottom: 20px;
  margin-top: 30px;
}
.home .piece-list .list-item {
  margin-bottom: 0;
}
.home .see-all-cta {
  margin-top: 60px;
}

.page-search .main-search-form .search-input {
  width: calc( (40px * 6) + (16px * 5) );
  display: inline-block;
  -webkit-appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: 1px solid #000;
  color: #000;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: normal;
  height: 35px;
  line-height: 1;
  padding: 0 10px;
  display: inline-block;
  vertical-align: top;
  -webkit-appearance: textfield;
}
@media only screen and (min-width: 768px) {
  .page-search .main-search-form .search-input {
    width: calc( (35px * 6) + (25px * 5) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .main-search-form .search-input {
    width: calc( (50px * 6) + (30px * 5) );
  }
}
.page-search .main-search-form .search-input:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-search .main-search-form .search-input:focus::-moz-focus-inner {
  border: 0;
}
.page-search .main-search-form .search-input::placeholder {
  color: #757575;
}
@media only screen and (min-width: 768px) {
  .page-search .main-search-form .search-input {
    width: calc( (40px * 8) + (16px * 7) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .page-search .main-search-form .search-input {
    width: calc( (35px * 8) + (25px * 7) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .page-search .main-search-form .search-input {
    width: calc( (50px * 8) + (30px * 7) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .main-search-form .search-input {
    width: calc( (40px * 6) + (16px * 5) );
  }
}
@media only screen and (min-width: 1024px) and (min-width: 768px) {
  .page-search .main-search-form .search-input {
    width: calc( (35px * 6) + (25px * 5) );
  }
}
@media only screen and (min-width: 1024px) and (min-width: 1024px) {
  .page-search .main-search-form .search-input {
    width: calc( (50px * 6) + (30px * 5) );
  }
}
.page-search .main-search-form .search-input::placeholder {
  color: #000;
}
.page-search .main-search-form .search-button {
  width: calc( (40px * 2) + (16px * 1) );
  margin-left: 16px;
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  vertical-align: top;
}
@media only screen and (min-width: 768px) {
  .page-search .main-search-form .search-button {
    width: calc( (35px * 2) + (25px * 1) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .main-search-form .search-button {
    width: calc( (50px * 2) + (30px * 1) );
  }
}
@media only screen and (min-width: 768px) {
  .page-search .main-search-form .search-button {
    margin-left: 25px;
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .main-search-form .search-button {
    margin-left: 30px;
  }
}
.page-search .main-search-form .search-button:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.page-search .main-search-form .search-button:active {
  text-decoration: none;
}
.page-search .main-search-form .search-button:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-search .main-search-form .search-button:focus::-moz-focus-inner {
  border: 0;
}
.page-search .main-search-form .search-button:disabled, .page-search .main-search-form .search-button[disabled] {
  cursor: not-allowed;
}
@media only screen and (min-width: 768px) {
  .page-search .main-search-form .search-button {
    width: calc( (40px * 4) + (16px * 3) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 768px) {
  .page-search .main-search-form .search-button {
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 768px) and (min-width: 1024px) {
  .page-search .main-search-form .search-button {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-search .main-search-form .search-button {
    width: calc( (40px * 2) + (16px * 1) );
  }
}
@media only screen and (min-width: 1024px) and (min-width: 768px) {
  .page-search .main-search-form .search-button {
    width: calc( (35px * 2) + (25px * 1) );
  }
}
@media only screen and (min-width: 1024px) and (min-width: 1024px) {
  .page-search .main-search-form .search-button {
    width: calc( (50px * 2) + (30px * 1) );
  }
}
.page-search .filter-legend {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
  margin: 30px 0 0 0;
}
.page-search .filter-list {
  column-count: 3;
}
.page-search .filter-list .list-item {
  padding: 10px 0;
}
.page-search .filter-list .filter-option-label {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  font-size: 11.25pt;
  margin: 0 0 0 10px;
}
.page-search .search-results {
  margin-top: 40px;
}
.page-search .search-results .title {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 25pt;
}
.page-search .search-results .title strong {
  font-weight: normal;
  font-style: normal;
}
@media only screen and (min-width: 768px) {
  .page-search .search-results .title {
    font-size: 30pt;
  }
}
.page-search .sidebar {
  margin-top: 100px;
}

/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
  * Sets `width` to the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColSpan The number of columns to consider to calculate the width.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
/**
* Sets `margin-left` for the specified column span.
*
* @param $numColSpan The number of columns to consider to calculate the width.
* @param $numGutters (Optional) Additional gutter width to add to the column span. Usually only one.
*/
/**
  * Calculates the span taken by
  *   `n` number of columns and gutters
  *   at a given breakpoint.
  *
  * @param $numColumns The number of columns to consider to calculate the width.
  * @param $breakpoint The breakpoint at which the calculations should be made.
  *
  * @return The width of the span of `n` columns,
  *   including the necessary amount of gutters.
  */
/**
  * Provides the span taken by
  * a column at a given breakpoint.
  */
/**
  * Provides the span taken by
  * a gutter at a given breakpoint.
  */
/**
  * Provides the span taken by
  * half a gutter at a given breakpoint.
  */
.page-login h1 {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 25pt;
}
.page-login h1 strong {
  font-weight: normal;
  font-style: normal;
}
@media only screen and (min-width: 768px) {
  .page-login h1 {
    font-size: 30pt;
  }
}
.page-login .apos-login-warning {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  background-color: lightgoldenrodyellow;
  border: 1px solid yellow;
  font-size: 10pt;
  margin: 20px 0;
  padding: 10px;
}
.page-login .apos-login-warning::before {
  content: "⚠️";
  margin-right: 5px;
}
.page-login .form-group {
  margin: 20px 0;
}
.page-login legend {
  font-size: 0;
  height: 0;
  visibility: hidden;
  width: 0;
}
.page-login label {
  display: block;
  color: #000;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-weight: normal;
  margin-bottom: 5px;
}
.page-login input[type=text],
.page-login input[type=password] {
  width: calc( (40px * 4) + (16px * 3) );
  display: inline-block;
  -webkit-appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: 1px solid #000;
  color: #000;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: normal;
  height: 35px;
  line-height: 1;
  padding: 0 10px;
}
@media only screen and (min-width: 768px) {
  .page-login input[type=text],
.page-login input[type=password] {
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-login input[type=text],
.page-login input[type=password] {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.page-login input[type=text]:focus,
.page-login input[type=password]:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-login input[type=text]:focus::-moz-focus-inner,
.page-login input[type=password]:focus::-moz-focus-inner {
  border: 0;
}
.page-login input[type=text]::placeholder,
.page-login input[type=password]::placeholder {
  color: #757575;
}
.page-login button[type=submit] {
  width: calc( (40px * 4) + (16px * 3) );
  display: inline-block;
  background-color: #000;
  border: 2px solid transparent;
  color: #fff;
  cursor: pointer;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: normal;
  font-weight: normal;
  line-height: 35px;
  height: 35px;
  padding: 0 20px;
  text-align: center;
  text-decoration: none;
}
@media only screen and (min-width: 768px) {
  .page-login button[type=submit] {
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .page-login button[type=submit] {
    width: calc( (50px * 4) + (30px * 3) );
  }
}
.page-login button[type=submit]:hover {
  text-decoration: none;
  background-color: #fff;
  color: #1276D3;
  border: 2px solid #1276D3;
}
.page-login button[type=submit]:active {
  text-decoration: none;
}
.page-login button[type=submit]:focus {
  border-color: #1276D3 !important;
  box-shadow: 0 0 0 2.5pt #1276D3 !important;
  outline: 0 !important;
  transition: box-shadow 0s linear !important;
}
.page-login button[type=submit]:focus::-moz-focus-inner {
  border: 0;
}
.page-login button[type=submit]:disabled, .page-login button[type=submit][disabled] {
  cursor: not-allowed;
}

.page-index .content-type-heading {
  border-bottom: 1px solid #bababa;
  color: #757575;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 10pt;
  font-weight: bold;
  margin-bottom: 0;
  padding-bottom: 10px;
}
.page-index .recently-added-pieces,
.page-index .recently-added-articles,
.page-index .recently-added-events,
.page-index .recently-added-education,
.page-index .recently-added-orgs,
.page-index .recently-added-projects {
  margin-top: 60px;
}
.page-index .recently-added-pieces:first-of-type,
.page-index .recently-added-articles:first-of-type,
.page-index .recently-added-events:first-of-type,
.page-index .recently-added-education:first-of-type,
.page-index .recently-added-orgs:first-of-type,
.page-index .recently-added-projects:first-of-type {
  margin-top: 0;
}
.page-index .recently-added-pieces .piece-list,
.page-index .recently-added-articles .piece-list,
.page-index .recently-added-events .piece-list,
.page-index .recently-added-education .piece-list,
.page-index .recently-added-orgs .piece-list,
.page-index .recently-added-projects .piece-list {
  margin: 20px 0;
}
.page-index .recently-added-pieces .piece-list .list-item,
.page-index .recently-added-articles .piece-list .list-item,
.page-index .recently-added-events .piece-list .list-item,
.page-index .recently-added-education .piece-list .list-item,
.page-index .recently-added-orgs .piece-list .list-item,
.page-index .recently-added-projects .piece-list .list-item {
  margin-bottom: 0;
}
.page-index .see-all-cta {
  margin-top: 40px;
}

.piece-details .h1 {
  margin-bottom: 0;
}
.piece-details .subheading {
  height: 45px;
  font-size: 12.5pt;
  font-family: "QuebecLight", Verdana, sans-serif;
}
.piece-details .subheading p {
  margin-top: 0;
  margin-bottom: 10px;
  line-height: 25px;
  height: 25px;
}
.piece-details .subheading .piece-link-list {
  display: inline-block;
  height: 25px;
  margin: 5px 0 20px 0;
}
.piece-details .page-content {
  margin-top: 25px;
}
.piece-details .hero-image {
  height: calc(calc( (40px * 6) + (16px * 5) ) * 0.5);
  width: calc( (40px * 6) + (16px * 5) );
  object-fit: cover;
}
@media only screen and (min-width: 768px) {
  .piece-details .hero-image {
    height: calc(calc( (35px * 8) + (25px * 7) ) * 0.5);
    width: calc( (35px * 8) + (25px * 7) );
  }
}
@media only screen and (min-width: 1024px) {
  .piece-details .hero-image {
    height: calc(calc( (50px * 8) + (30px * 7) ) * 0.5);
    width: calc( (50px * 8) + (30px * 7) );
  }
}
.piece-details figcaption {
  color: #3b3b3b;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: italic;
  margin: 15px 0 30px 0;
  text-align: right;
}
.piece-details .piece-props-list dt {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 15pt;
  font-style: normal;
  font-weight: bold;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-weight: bold;
  margin-bottom: 0;
}
.piece-details .piece-props-list dd {
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 12.5pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  margin: 15px 0;
  text-align: left;
  word-wrap: break-word;
  margin-top: 10px;
}
.piece-details .piece-props-list dd .piece-link-list,
.piece-details .piece-props-list dd .tag-list {
  margin-top: 0;
}

.articles-index .piece-card .heading {
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  margin: 20px 0 15px 0;
  font-size: 17.5pt;
  margin: 0;
}
.articles-index .piece-card .heading strong {
  font-weight: normal;
  font-style: normal;
}

.article-details .mention-notes {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  font-size: 11.25pt;
}

.book-details .page-content {
  margin-top: 0;
}
.book-details .book-cover {
  position: relative;
  float: left;
  margin-bottom: 16px;
  margin-right: 16px;
  top: 25px;
  width: calc( (40px * 4) + (16px * 3) );
}
@media only screen and (min-width: 768px) {
  .book-details .book-cover {
    margin-bottom: 25px;
    margin-right: 25px;
    width: calc( (35px * 4) + (25px * 3) );
  }
}
@media only screen and (min-width: 1024px) {
  .book-details .book-cover {
    margin-bottom: 30px;
    margin-right: 30px;
    width: calc( (50px * 4) + (30px * 3) );
  }
}

.event-details .relative-date {
  color: #3b3b3b;
  font-family: "QuebecLight", Verdana, sans-serif;
  font-size: 11.25pt;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  text-align: left;
  font-size: 11.25pt;
}

.sidebar-person-details .fig-profile .fig-headshot {
  object-fit: cover;
  height: calc( (40px * 6) + (16px * 5) );
  width: calc( (40px * 6) + (16px * 5) );
}
@media only screen and (min-width: 1024px) {
  .sidebar-person-details .fig-profile .fig-headshot {
    width: calc( (50px * 4) + (30px * 3) );
    height: calc( (50px * 4) + (30px * 3) );
  }
}
.sidebar-person-details .fig-profile .fig-credits {
  color: #3b3b3b;
  font-family: "YoungSerifRegular", Georgia, "Times New Roman", Times, serif;
  font-size: 10pt;
  font-style: italic;
  margin: 15px 0 30px 0;
  text-align: right;
}

.projects-index .content-type-heading {
  margin-top: 60px;
}
.projects-index .content-type-heading + .piece-list {
  margin-top: 20px;
}

.project-details .main-hero-image {
  object-fit: cover;
  height: calc(calc( (50px * 8) + (30px * 7) ) * 0.5625);
  width: calc( (50px * 8) + (30px * 7) );
}

/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

i {
  font-style: italic;
}

b {
  font-weight: bold;
}

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0;
}

.clearfix {
  zoom: 1;
}
.clearfix:before {
  content: "";
  display: block;
}
.clearfix:after {
  content: "";
  display: table;
  clear: both;
}


/*# sourceMappingURL=site.css.map*/